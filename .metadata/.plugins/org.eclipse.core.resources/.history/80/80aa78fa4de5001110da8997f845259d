package br.com.caelum.financas.dao;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.hibernate.search.jpa.*;
import org.apache.lucene.*;



import br.com.caelum.financas.modelo.Conta;
import br.com.caelum.financas.modelo.Movimentacao;
import br.com.caelum.financas.modelo.TipoMovimentacao;
import br.com.caelum.financas.modelo.ValorPorMes;

public class MovimentacaoDAO {

	private final DAO<Movimentacao> dao;
	
	private EntityManager em;

	public MovimentacaoDAO(EntityManager em) {
		this.em = em;
		dao = new DAO<Movimentacao>(em, Movimentacao.class);			
	}

	public void adiciona(Movimentacao t) {
		dao.adiciona(t);
	}

	public Movimentacao busca(Integer id) {
		return dao.busca(id);
	}

	public List<Movimentacao> lista() {
		return dao.lista();
	}
	
	public void remove(Movimentacao t) {
		dao.remove(t);
	}
	
	public List<Movimentacao> listaPorValorETipo(BigDecimal valor, TipoMovimentacao tipo) {
		return dao.listaPorTipo(valor, tipo);
		
	}
	
	public List<Movimentacao> listaAPorraToda(Conta conta) {
		return dao.listaAPorraToda(conta);
	}
	
	public BigDecimal calculaTotalMovimentado(Conta conta, TipoMovimentacao tipo) {
		return dao.calcula(conta, tipo);
	}
	
	public List<Movimentacao> buscaPorTitular(String titular) {
		return dao.buscaPorTitular(titular);
	}
	
	public List<ValorPorMes> listaMesesComMovimentacoes(Conta conta, TipoMovimentacao tipo) {
		return dao.listaMesesComMovimentacoes(conta, tipo);
	}
	
	public List<Movimentacao> todasComCriteria() {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Movimentacao> cq = cb.createQuery(Movimentacao.class);
		cq.from(Movimentacao.class);
		
		return em.createQuery(cq).getResultList();
	}
	
	public BigDecimal somaMovimentacoesDoTitular(String Titular) {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<BigDecimal> cq = cb.createQuery(BigDecimal.class);
		Root<Movimentacao> root = cq.from(Movimentacao.class);
		cq.select(cb.sum(root.<BigDecimal>get("valor")));
		cq.where(cb.like(root.<Conta>get("conta").<String>get("titular"), Titular));
		
		return this.em.createQuery(cq).getSingleResult();
	}
	
	public List<Movimentacao> pesquisa(Conta conta, TipoMovimentacao tipo, Integer mes) {
		CriteriaBuilder cb = em.getCriteriaBuilder();
		CriteriaQuery<Movimentacao> cq = cb.createQuery(Movimentacao.class);
		Root<Movimentacao> root = cq.from(Movimentacao.class);
		Predicate pdct = cb.conjunction();
		
		if(conta != null) {
			pdct = cb.and(pdct, cb.equal(root.<Conta>get("conta"), conta));
		}
		if(mes != null && mes != 0) {
			Expression<Integer> ex = cb.function("month", Integer.class, root.<Calendar>get("data"));
			pdct = cb.and(pdct, cb.equal(ex, mes));
		}
		if(tipo != null) {
			pdct = cb.and(pdct, cb.equal(root.<TipoMovimentacao>get("tipoMovimentacao"), tipo));
		}
		cq.where(pdct);		
		return this.em.createQuery(cq).getResultList();
	}
	
	public List<Movimentacao> buscaMovimentacaoBaseadoNasTags(String texto) {
		FullTextEntityManager ftem = Search.getFullTextEntityManager(em);
		QueryParser

//		try {
//			Query query = qp.parse(ftem);
//			FullTextQuery ftq = ftem.createFullTextQuery
//					(query, Movimentacao.class);
//			List<Movimentacao> movs = ftq.getResultList();
//			return movs;
//			
//		} catch(ParseException e) {
//			throw new IllegalArgumentException(e);
//		}
		
		return null;			
	}
	
}
